generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  passwordHash String
  isAdmin      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  bio          String?   @db.Text
  avatarUrl    String?
  location     String?
  
  posts        Post[]
  comments     Comment[]
  postVotes    PostVote[]
  commentVotes CommentVote[]

  sentFriendRequests     Friendship[] @relation("RequestingFriend")
  receivedFriendRequests Friendship[] @relation("ReceivingFriend")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime  @default(now())
  authorId  Int?
  author    User? @relation(fields: [authorId], references: [id], onDelete: SetNull)
  comments  Comment[]
  votes     PostVote[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  postId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  Int?
  author    User?      @relation(fields: [authorId], references: [id], onDelete: SetNull)
  votes     CommentVote[]
}

model PostVote {
  id        Int       @id @default(autoincrement())
  voteType  VoteType
  createdAt DateTime  @default(now())
  postId    Int
  userId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete:Cascade)

  @@unique([postId, userId])
}

model CommentVote {
  id         Int      @id @default(autoincrement())
  voteType   VoteType
  createdAt  DateTime @default(now())
  commentId  Int
  userId     Int
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
}

enum VoteType {
  upvote
  downvote
}

model Friendship {
  id         Int       @id @default(autoincrement())
  requester  User      @relation("RequestingFriend", fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId Int

  receiver   User      @relation("ReceivingFriend", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int

  status     FriendshipStatus @default(pending)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([requesterId, receiverId])
}

enum FriendshipStatus {
  pending
  accepted
  blocked
  declined
}
